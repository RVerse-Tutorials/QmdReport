---
title: Tables or figures in a for loop
---

```{r include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, message=FALSE)
library(knitr)
library(dplyr)
library(flextable)
```

Outputting tables (or figure) in a for loop works fine, but there is no way to set the table numbers dynamically. We really need that dynamic numbering and cross-reference feature in a big report.

Example of a table in a for loop.

```{r results='asis'}
#| echo: true
for(cyl in c(4,6,8)){
  ft <- mtcars[,1:5] %>%
    filter(cyl == cyl) %>%
    head(2) %>%
    flextable() %>%
    autofit() %>%
    set_caption(
    caption = paste("Cars with", cyl, "cylinders"), 
    style = "Table Caption")
    cat(knitr::knit_print(ft))
}
```

We have to use a bit of magic to get our dynamic table numbers back. The trick is to use a child Rmd (or qmd) in a for loop. This trick can be used for figures too but I'll just show it here with tables.

<!-- This code inspired from https://gist.github.com/rmoff/a043676a2f084b81a434 -->

We use `knit_expand()` and make a child Rmd that uses double curly braces like `{{value.to.match}}` in the code. That way the value at the time this Rmd was embedded can be referenced. Note that if `value.to.match` were a string (which it is not in this example), we would need to add quotes around `{{value.to.match}}` in our code.

With this approach we get our numbered tables and we can reference the tables usual such as @tbl-cyl8.


```{r include=FALSE}
#| echo: true
out = NULL
for (value.to.match in c(4,6,8)) {
  out = c(out, knit_expand(here::here('tables', 'Table_for_child.Rmd')))
}
```
`r paste(knit(text = out), collapse = '\n')`


```{=openxml}
<w:p><w:r><w:br w:type="page"/></w:r></w:p>
```
